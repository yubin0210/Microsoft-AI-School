/**
 * @fileoverview JavaScript의 콜백(Callback) 함수에 대해 설명합니다.
 * 콜백은 다른 함수에 인자로 전달되어, 특정 작업이 완료된 후 실행되는 함수입니다.
 * 이는 JavaScript의 비동기 처리 모델의 가장 기본적인 형태입니다.
 *
 * @see https://developer.mozilla.org/ko/docs/Glossary/Callback_function
 */

console.log("--- JavaScript 콜백(Callback) ---");

// -----------------------------------------------------------------------------
// 1. 콜백의 기본 개념 (동기적 콜백)
// -----------------------------------------------------------------------------
/*
 * 다른 함수의 인자로 전달되는 함수를 '콜백 함수'라고 합니다.
 * 배열의 forEach 메서드는 각 요소에 대해 콜백 함수를 실행하는 대표적인 예입니다.
 * 이 경우 콜백은 순서대로 즉시 실행되므로 '동기적'입니다.
 */
console.log("\n1. 동기적 콜백 예제:");

const numbers = [1, 2, 3];

function printItem(item) {
  console.log(`  - 아이템: ${item}`);
}

numbers.forEach(printItem); // printItem 함수가 forEach의 콜백으로 전달됩니다.

// -----------------------------------------------------------------------------
// 2. 비동기 처리와 콜백
// -----------------------------------------------------------------------------
/*
 * 시간이 걸리는 작업(예: 네트워크 요청, 파일 읽기)이 끝난 후 특정 코드를
 * 실행하고 싶을 때 비동기 콜백을 사용합니다. setTimeout은 지정된 시간 후에
 * 콜백 함수를 실행하는 대표적인 비동기 함수입니다.
 */
console.log("\n2. 비동기 콜백 예제 (setTimeout):");

function onTimeout() {
  console.log("  - 2초 후에 이 메시지가 표시됩니다.");
}

console.log("  - 타이머 시작...");
setTimeout(onTimeout, 2000); // 2초(2000ms) 후에 onTimeout 콜백이 실행됩니다.
console.log("  - setTimeout은 코드를 멈추지 않고 바로 다음 줄을 실행합니다.");

// -----------------------------------------------------------------------------
// 3. 콜백 지옥 (Callback Hell)
// -----------------------------------------------------------------------------
/*
 * 여러 비동기 작업이 순차적으로 의존해야 할 때, 콜백 안에 또 다른 콜백을
 * 중첩하게 되면 코드가 깊어지고 가독성이 떨어지는 '콜백 지옥' 현상이 발생합니다.
 * 이는 코드 파악과 에러 처리를 매우 어렵게 만듭니다.
 */
console.log("\n3. 콜백 지옥 예제:");

setTimeout(() => {
  console.log("  - 1단계: 사용자 정보 가져오기 (1초 소요)");
  setTimeout(() => {
    console.log("    - 2단계: 사용자 게시물 가져오기 (1초 소요)");
    setTimeout(() => {
      console.log("      - 3단계: 게시물 댓글 가져오기 (1초 소요)");
      console.log("        - 모든 작업 완료!");
    }, 1000);
  }, 1000);
}, 1000);


// -----------------------------------------------------------------------------
// 4. 콜백 지옥을 해결하는 방법: Promise
// -----------------------------------------------------------------------------
/*
 * 콜백 지옥의 문제를 해결하기 위해 ES6에서 Promise가 도입되었습니다.
 * Promise를 사용하면 비동기 작업을 보다 깔끔하게 체이닝(chaining)할 수 있습니다.
 */
console.log("\n4. 콜백 지옥 해결 (Promise 사용):");

function step(delay, message) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log(message);
      resolve();
    }, delay);
  });
}

step(1000, "  - Promise 1단계")
  .then(() => step(1000, "    - Promise 2단계"))
  .then(() => step(1000, "      - Promise 3단계"))
  .then(() => console.log("        - Promise로 모든 작업 완료!")); 